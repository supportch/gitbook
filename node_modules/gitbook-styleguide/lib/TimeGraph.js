'use strict';

var React = require('react');
var moment = require('moment');

var DateSpan = require('./Date');

var TimeLine = React.createClass({
    displayName: 'TimeLine',

    propTypes: {
        currentX: React.PropTypes.number,
        lineTop: React.PropTypes.number,
        lineBottom: React.PropTypes.number,
        lastX: React.PropTypes.number,
        lastPoints: React.PropTypes.array,
        points: React.PropTypes.array,
        setHovered: React.PropTypes.func
    },

    contextTypes: {
        pointRadius: React.PropTypes.number,
        lineWidth: React.PropTypes.number,
        axeColor: React.PropTypes.string
    },

    getInitialState: function getInitialState() {
        return {
            hovered: false
        };
    },
    setHovered: function setHovered(state, params) {
        // Send global state hovered parameters
        if (!state) {
            params = null;
        }

        this.props.setHovered(params);

        this.setState({
            hovered: state
        });
    },
    renderPathLine: function renderPathLine(index) {
        var lastX = this.props.lastX;
        if (!Boolean(lastX)) {
            return null;
        }

        var currentX = this.props.currentX;

        var currentPoint = this.props.points[index];
        var lastPoint = this.props.lastPoints[index];

        return React.createElement('line', { x1: lastX, y1: lastPoint.y, x2: currentX, y2: currentPoint.y,
            stroke: currentPoint.color, strokeWidth: this.context.lineWidth });
    },
    render: function render() {
        var _this = this;

        var hovered = this.state.hovered;
        var _props = this.props,
            currentX = _props.currentX,
            lineTop = _props.lineTop,
            lineBottom = _props.lineBottom,
            points = _props.points;

        // Increase points radius if hovered

        var pointRadius = this.context.pointRadius;
        if (hovered) {
            pointRadius += 2;
        }

        var hoveredParams = {
            x: currentX,
            points: points
        };

        return React.createElement(
            'g',
            null,
            React.createElement('line', { x1: currentX, x2: currentX, y1: lineTop, y2: lineBottom,
                stroke: this.context.axeColor, strokeWidth: this.context.lineWidth }),
            points.map(function (point, index) {
                var color = point.color;
                // Default serie name to index
                var dataSerie = point.serie || index;

                return React.createElement(
                    'g',
                    { key: index },
                    _this.renderPathLine(index),
                    React.createElement('circle', { key: index,
                        onMouseEnter: _this.setHovered.bind(_this, true, hoveredParams),
                        onMouseLeave: _this.setHovered.bind(_this, false),
                        className: 'serie-point' + (hovered ? ' hovered' : ''),
                        r: pointRadius,
                        fill: color,
                        strokeWidth: _this.context.lineWidth * 2,
                        stroke: '#FFFFFF',
                        cx: currentX,
                        cy: point.y,
                        'data-value': point.value,
                        'data-timestamp': Number(point.date),
                        'data-serie': dataSerie }),
                    '}'
                );
            })
        );
    }
});

var Body = React.createClass({
    displayName: 'Body',

    propTypes: {
        dateMin: React.PropTypes.number,
        dateMax: React.PropTypes.number,
        valueMin: React.PropTypes.number,
        valueMax: React.PropTypes.number,
        width: React.PropTypes.number,
        height: React.PropTypes.number,
        innerX: React.PropTypes.number,
        innerY: React.PropTypes.number,
        yBase: React.PropTypes.number,
        series: React.PropTypes.array,
        setHovered: React.PropTypes.func
    },

    contextTypes: {
        seriesStyle: React.PropTypes.array,
        pointRadius: React.PropTypes.number,
        defaultColor: React.PropTypes.string,
        lineWidth: React.PropTypes.number,
        axeColor: React.PropTypes.string
    },

    // Compute X for a point inside Body
    innerPositionX: function innerPositionX(pX) {
        return this.props.innerX + pX * this.props.width;
    },


    // Compute Y for a point inside Body
    innerPositionY: function innerPositionY(pY) {
        return this.props.yBase + this.props.height * (1 - pY);
    },


    // Return inner X value for a date
    getInnerX: function getInnerX(date) {
        return this.innerPositionX((date - this.props.dateMin) / (this.props.dateMax - this.props.dateMin));
    },


    // Return inner Y value for a value
    getInnerY: function getInnerY(value) {
        return this.innerPositionY((value - this.props.valueMin) / (this.props.valueMax - this.props.valueMin));
    },


    // Return correct mapping for a point to draw in TimeLine
    formatPoint: function formatPoint(time, point, index) {
        var seriesStyle = this.context.seriesStyle;
        var serieStyle = seriesStyle[index];

        return {
            color: point.color || (serieStyle ? serieStyle.color : null) || this.context.defaultColor,
            value: point.value,
            serie: point.serie || (serieStyle ? serieStyle.title : index),
            date: time.date,
            y: this.getInnerY(point.value)
        };
    },


    // Draw this time line
    drawTimeLine: function drawTimeLine(time, i, series) {
        // Current time informations
        var currentX = this.getInnerX(time.date);
        var lineTop = this.props.yBase;
        var lineBottom = this.props.yBase + this.props.height;

        var points = time.points.map(this.formatPoint.bind(this, time));

        // Last time informations
        var lastX = null;
        var lastPoints = null;
        var lastTime = series[i - 1];

        if (Boolean(lastTime)) {
            lastX = this.getInnerX(lastTime.date);
            lastPoints = lastTime.points.map(this.formatPoint.bind(this, lastTime));
        }

        return React.createElement(TimeLine, { key: i,
            currentX: currentX,
            lineTop: lineTop,
            lineBottom: lineBottom,
            points: points,
            lastX: lastX,
            lastPoints: lastPoints,
            setHovered: this.props.setHovered });
    },
    render: function render() {
        var series = this.props.series;


        return React.createElement(
            'g',
            null,
            series.map(this.drawTimeLine, this)
        );
    }
});

var XAxis = React.createClass({
    displayName: 'XAxis',

    propTypes: {
        length: React.PropTypes.number,
        dateMin: React.PropTypes.number,
        dateMax: React.PropTypes.number,
        innerX: React.PropTypes.number,
        yTop: React.PropTypes.number
    },

    contextTypes: {
        textColor: React.PropTypes.string,
        textFontSize: React.PropTypes.number,
        textFontFamily: React.PropTypes.string
    },

    getValuePerInterval: function getValuePerInterval() {
        var dateMin = this.props.dateMin;
        var dateMax = this.props.dateMax;

        // Get optimal interval for X axis
        return [{
            format: 'SSSS',
            interval: 1
        }, {
            format: 'SSSS',
            interval: 10
        }, {
            format: 'SSSS',
            interval: 100
        }, {
            format: 'H:mm:ss',
            interval: 1 * 1000
        }, {
            format: 'H:mm',
            interval: 60 * 1000
        }, {
            format: 'H',
            interval: 60 * 60 * 1000
        }, {
            format: 'DD/MM',
            interval: 1 * 24 * 60 * 60 * 1000
        }, {
            format: 'DD/MM',
            interval: 7 * 24 * 60 * 60 * 1000
        }, {
            format: 'DD/MM',
            interval: 30 * 24 * 60 * 60 * 1000
        }, {
            format: 'YYYY',
            interval: 365 * 24 * 60 * 60 * 1000
        }, {
            format: 'YYYY',
            interval: 10 * 365 * 24 * 60 * 60 * 1000
        }, {
            format: 'YYYY',
            interval: 100 * 365 * 24 * 60 * 60 * 1000
        }].filter(function (interval) {
            var count = (dateMax - dateMin) / interval.interval;
            return count > 1;
        }).map(function (interval) {
            var count = (dateMax - dateMin) / interval.interval;
            return { count: count, interval: interval };
        }).sort(function (a, b) {
            return a.count > b.count;
        })[0].interval;
    },
    render: function render() {
        var _this2 = this;

        var _props2 = this.props,
            dateMin = _props2.dateMin,
            dateMax = _props2.dateMax,
            length = _props2.length,
            innerX = _props2.innerX,
            yTop = _props2.yTop;

        // Compute intervals for rendering dates

        var valuePerInterval = this.getValuePerInterval();
        var wPerMS = length / (dateMax - dateMin);
        var axeXInterval = (dateMax - dateMin) * wPerMS / (this.context.textFontSize * 10);

        // Construct range of intervals
        var intervalRange = [];
        for (var i = 0; i < axeXInterval; i++) {
            intervalRange.push(i);
        }

        return React.createElement(
            'g',
            null,
            intervalRange.map(function (i) {
                var value = i * valuePerInterval.interval;
                var date = new Date(dateMin + value);

                var x = innerX + value * wPerMS;
                // Don't draw point if too far
                if (x > innerX + length) {
                    return null;
                }

                return React.createElement(
                    'text',
                    { key: i, x: x, y: yTop,
                        fontFamily: _this2.context.textFontFamily, fontSize: _this2.context.textFontSize,
                        fill: _this2.context.textColor, textAnchor: 'middle' },
                    moment(date).format(valuePerInterval.format)
                );
            })
        );
    }
});

var YAxis = React.createClass({
    displayName: 'YAxis',

    propTypes: {
        length: React.PropTypes.number,
        valueMin: React.PropTypes.number,
        valueMax: React.PropTypes.number,
        innerX: React.PropTypes.number,
        innerY: React.PropTypes.number,
        yBase: React.PropTypes.number,
        axeYInterval: React.PropTypes.number
    },

    // Computes the optimal tick step for the Y axis
    // We assume: range = Math.abs(upper - lower)
    // i.e: range should not be negative
    optimalTickStep: function optimalTickStep(maxTicks) {
        var valueMin = this.props.valueMin;
        var valueMax = this.props.valueMax;

        var range = valueMax - valueMin;
        var minimum = range / maxTicks;
        var magnitude = Math.pow(10, Math.floor(Math.log(minimum) / Math.log(10)));
        var residual = minimum / magnitude;

        // Tick is an amplified magnitude
        // depending on the residual
        if (residual > 5) {
            return 10 * magnitude;
        } else if (residual > 2) {
            return 5 * magnitude;
        } else if (residual > 1) {
            return 2 * magnitude;
        }
        return magnitude;
    },


    contextTypes: {
        lineWidth: React.PropTypes.number,
        axeColor: React.PropTypes.string,
        axeMarkerWidth: React.PropTypes.number,
        textColor: React.PropTypes.string,
        textFontSize: React.PropTypes.number,
        textFontFamily: React.PropTypes.string
    },

    render: function render() {
        var _this3 = this;

        var _props3 = this.props,
            valueMin = _props3.valueMin,
            valueMax = _props3.valueMax,
            length = _props3.length,
            innerX = _props3.innerX,
            innerY = _props3.innerY,
            yBase = _props3.yBase;
        var axeYInterval = this.props.axeYInterval;


        var hPerValue = length / (valueMax - valueMin);
        axeYInterval = (valueMax - valueMin) * hPerValue / (this.context.textFontSize * 4);

        // Calcul perfect value per interval (1, 10, 100, 1000, ...)
        var valuePerInterval = this.optimalTickStep(axeYInterval);
        // Construct range of intervals
        var intervalRange = [];
        for (var i = 0; i < axeYInterval + 1; i++) {
            intervalRange.push(i);
        }

        return React.createElement(
            'g',
            null,
            intervalRange.map(function (i) {
                var value = i * valuePerInterval;
                var y = innerY - value * hPerValue;
                var displayValue = value + valueMin;

                // Don't draw point if is too high
                if (y < yBase) {
                    return null;
                }

                var textX = innerX - 2 * _this3.context.axeMarkerWidth;
                var lineX1 = innerX - _this3.context.axeMarkerWidth;
                var lineX2 = innerX;

                return React.createElement(
                    'g',
                    { key: i },
                    React.createElement(
                        'text',
                        { x: textX, y: y,
                            fontFamily: _this3.context.textFontFamily, fontSize: _this3.context.textFontSize,
                            textAnchor: 'end', fill: _this3.context.textColor },
                        displayValue
                    ),
                    React.createElement('line', { x1: lineX1, x2: lineX2, y1: y, y2: y,
                        stroke: _this3.context.axeColor, strokeWidth: _this3.context.lineWidth })
                );
            })
        );
    }
});

var TimeGraph = React.createClass({
    displayName: 'TimeGraph',

    propTypes: {
        // Series
        series: React.PropTypes.array.isRequired,
        seriesStyle: React.PropTypes.array,
        minValue: React.PropTypes.number,

        // Autofill
        autoFill: React.PropTypes.bool,
        autoFillValue: React.PropTypes.number,
        autoFillStartTime: React.PropTypes.number,
        autoFillEndTime: React.PropTypes.number,

        // Size
        width: React.PropTypes.number,
        height: React.PropTypes.number,
        padding: React.PropTypes.number,

        // Styling
        pointRadius: React.PropTypes.number,
        lineWidth: React.PropTypes.number,
        defaultColor: React.PropTypes.string,

        axeColor: React.PropTypes.string,
        axeMarkerWidth: React.PropTypes.number,

        textColor: React.PropTypes.string,
        textFontSize: React.PropTypes.number,
        textFontFamily: React.PropTypes.string
    },

    childContextTypes: {
        seriesStyle: React.PropTypes.array,
        pointRadius: React.PropTypes.number,
        defaultColor: React.PropTypes.string,
        lineWidth: React.PropTypes.number,

        axeColor: React.PropTypes.string,
        axeMarkerWidth: React.PropTypes.number,

        textColor: React.PropTypes.string,
        textFontSize: React.PropTypes.number,
        textFontFamily: React.PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
        return {
            // Autofill
            autoFill: false,
            autoFillValue: 0,
            autoFillInterval: 1000 * 60 * 60 * 24,
            autoFillStartTime: null,
            autoFillEndTime: null,

            // Size
            width: 800,
            height: 400,
            padding: 20,

            // Styling
            pointRadius: 4,
            lineWidth: 1,
            defaultColor: '#26cb7c',

            axeColor: '#eee',
            axeMarkerWidth: 10,

            textColor: '#aaa',
            textFontSize: 10,
            textFontFamily: 'helvetica'
        };
    },
    getChildContext: function getChildContext() {
        return {
            seriesStyle: this.props.seriesStyle,
            pointRadius: this.props.pointRadius,
            defaultColor: this.props.defaultColor,
            lineWidth: this.props.lineWidth,
            axeColor: this.props.axeColor,
            axeMarkerWidth: this.props.axeMarkerWidth,
            textColor: this.props.textColor,
            textFontSize: this.props.textFontSize,
            textFontFamily: this.props.textFontFamily
        };
    },
    getInitialState: function getInitialState() {
        return this.getStateFromProps(this.props);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState(this.getStateFromProps(nextProps));
    },
    getStateFromProps: function getStateFromProps(props) {
        var width = props.width;
        var height = props.height;
        var padding = props.padding;
        var minValue = props.minValue;
        var defaultColor = props.defaultColor;
        var seriesStyle = props.seriesStyle;
        var series = props.series;

        // Compute values ranges
        var dateMin = null;
        var dateMax = null;
        var valueMin = null;
        var valueMax = null;

        series = series.map(function (time, i) {
            // Set min/max dates
            var date = new Date(time.date).getTime();
            dateMin = Boolean(dateMin) ? Math.min(dateMin, date) : date;
            dateMax = Boolean(dateMax) ? Math.max(dateMax, date) : date;

            // Set min/max values
            var points = time.points;
            points.forEach(function (point) {
                var value = point.value;
                valueMin = Boolean(valueMin) ? Math.min(valueMin, value) : value;
                valueMax = Boolean(valueMax) ? Math.max(valueMax, value) : value;
            });

            return {
                date: date,
                points: points
            };
        });

        // Sort by date
        series.sort(function (a, b) {
            return a.date - b.date;
        });

        // Set minValue if set
        if (typeof minValue != 'undefined' && minValue < valueMin) {
            valueMin = minValue;
        }

        // Auto-fill
        if (props.autoFill) {
            var autoFillStartTime = props.autoFillStartTime;
            var autoFillEndTime = props.autoFillEndTime;
            var autoFillInterval = props.autoFillInterval;
            var autoFillValue = props.autoFillValue;

            // Set autoFill times to timestamps if provided
            if (Boolean(autoFillStartTime)) {
                autoFillStartTime = new Date(autoFillStartTime).getTime();
            }
            if (Boolean(autoFillEndTime)) {
                autoFillEndTime = new Date(autoFillEndTime).getTime();
            }
            // Set start and end time depending on options
            dateMin = Boolean(autoFillStartTime) ? autoFillStartTime : dateMin;
            dateMax = Boolean(autoFillEndTime) ? autoFillEndTime : dateMax;

            // Set endTime to construct serie
            var serieEndTime = Boolean(autoFillEndTime) ? dateMax : dateMax + autoFillInterval;

            // Set valueMin and valueMax
            valueMin = Math.min(valueMin, autoFillValue);
            valueMax = Math.max(valueMax, autoFillValue);

            // Construct time range
            var timeRange = [];
            for (var t = dateMin; t < serieEndTime; t += autoFillInterval) {
                timeRange.push(t);
            }

            // Fill current serie with existing points or with autoFillValue
            var seriesIndex = 0;

            series = timeRange.map(function (time, i) {
                var data = series[seriesIndex];

                if (Boolean(data) && data.date == time) {
                    seriesIndex++;
                    return data;
                } else {
                    // Construct missing points
                    return {
                        date: time,
                        points: seriesStyle.map(function (style, serieI) {
                            return {
                                serie: style.title || serieI,
                                value: autoFillValue,
                                color: style.color || defaultColor
                            };
                        })
                    };
                }
            });
        }

        if (valueMax == valueMin) {
            valueMax = valueMin + 1;
        }

        // Compute axe sizes
        var axeXHeight = props.textFontSize * 3;
        var axeYWidth = valueMax.toFixed(0).length * props.textFontSize * 1.5 + props.axeMarkerWidth;

        var axeXLength = width - 2 * padding - axeYWidth;
        var axeYLength = height - 2 * padding - axeXHeight;

        // Compute body size
        var innerX = axeYWidth + padding;
        var innerY = height - (axeXHeight + padding);

        var yBase = padding;
        var yTop = height - padding;

        // No tooltip by default
        var hovered = null;

        return {
            width: width,
            height: height,
            series: series,
            dateMin: dateMin,
            dateMax: dateMax,
            valueMin: valueMin,
            valueMax: valueMax,
            axeXLength: axeXLength,
            axeYLength: axeYLength,
            innerX: innerX,
            innerY: innerY,
            yTop: yTop,
            yBase: yBase,
            hovered: hovered
        };
    },
    setHovered: function setHovered(params) {
        this.setState({
            hovered: params
        });
    },
    renderTooltip: function renderTooltip() {
        var width = this.props.width;
        var hovered = this.state.hovered;

        if (!hovered) {
            return null;
        }

        var x = hovered.x,
            points = hovered.points;


        var sumPointsY = points.reduce(function (total, point) {
            return total + point.y;
        }, 0);
        var tooltipY = Math.floor(sumPointsY / points.length);

        // Pretty display date
        var pointsDateStr = new Date(points[0].date).toLocaleString();
        pointsDateStr = pointsDateStr.split(' ')[0].split('-').join('/');

        var tooltipStyle = {
            top: tooltipY - 20
        };
        // Set tooltip to right or left depending on values position in TimeGraph
        if (x > width / 2) {
            tooltipStyle.right = width - x + 15;
        } else {
            tooltipStyle.left = x + 15;
        }

        return React.createElement(
            'div',
            { className: 'time-graph-tooltip', style: tooltipStyle },
            React.createElement(
                'h6',
                { className: 'points-date' },
                React.createElement(DateSpan, { date: new Date(points[0].date), format: 'dddd, MMMM D, YYYY' })
            ),
            React.createElement(
                'table',
                { className: 'points-details' },
                React.createElement(
                    'tbody',
                    null,
                    React.createElement(
                        'tr',
                        { className: 'points-colors' },
                        points.map(function (point, index) {
                            return React.createElement('td', { key: index, style: { backgroundColor: point.color } });
                        })
                    ),
                    React.createElement(
                        'tr',
                        { className: 'points-values' },
                        points.map(function (point, index) {
                            return React.createElement(
                                'td',
                                { key: index },
                                React.createElement(
                                    'b',
                                    null,
                                    point.value
                                ),
                                ' ',
                                point.serie
                            );
                        })
                    )
                )
            )
        );
    },
    render: function render() {
        var _state = this.state,
            width = _state.width,
            height = _state.height,
            series = _state.series,
            dateMin = _state.dateMin,
            dateMax = _state.dateMax,
            valueMin = _state.valueMin,
            valueMax = _state.valueMax,
            axeXLength = _state.axeXLength,
            axeYLength = _state.axeYLength,
            innerX = _state.innerX,
            innerY = _state.innerY,
            yTop = _state.yTop,
            yBase = _state.yBase;


        return React.createElement(
            'div',
            { className: 'time-graph' },
            this.renderTooltip(),
            React.createElement(
                'svg',
                { width: width, height: height, viewBox: '0 0 ' + width + ' ' + height, preserveAspectRatio: 'xMidYMid meet' },
                React.createElement(XAxis, { length: axeXLength,
                    dateMin: dateMin,
                    dateMax: dateMax,
                    innerX: innerX,
                    yTop: yTop }),
                React.createElement(YAxis, { length: axeYLength,
                    valueMin: valueMin,
                    valueMax: valueMax,
                    innerX: innerX,
                    innerY: innerY,
                    yBase: yBase }),
                React.createElement(Body, { series: series,
                    dateMin: dateMin,
                    dateMax: dateMax,
                    valueMin: valueMin,
                    valueMax: valueMax,
                    width: axeXLength,
                    height: axeYLength,
                    innerX: innerX,
                    innerY: innerY,
                    yBase: yBase,
                    setHovered: this.setHovered })
            )
        );
    }
});

module.exports = TimeGraph;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,