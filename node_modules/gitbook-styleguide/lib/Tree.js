'use strict';

var React = require('react');
var classNames = require('classnames');

var Icon = require('./icon');

var PADDING_INITIAL = 10;
var DEPTH_PADDING = 18;

var STATUS = ['danger', 'success', 'warning', 'selected'];

/**
 * Tree component:
 *
 * <Tree>
 *      <Tree.Node>
 *          <Tree.Leaf>
 *              <Tree.Toggle /> My Directory
 *          </Tree.Leaf>
 *          <Tree>...</Tree>
 *      </Tree.Node>
 *      <Tree.Node>
 *          <Tree.Leaf>My File</Tree.Leaf>
 *      </Tree.Node>
 * </Tree>
 */

var Tree = React.createClass({
    displayName: 'Tree',

    propTypes: {
        children: React.PropTypes.node,
        depth: React.PropTypes.number
    },
    contextTypes: {
        depth: React.PropTypes.number
    },
    childContextTypes: {
        depth: React.PropTypes.number
    },

    getChildContext: function getChildContext() {
        var depth = this.props.depth || this.context.depth || 0;

        return {
            depth: depth + 1
        };
    },
    render: function render() {
        return React.createElement(
            'div',
            { className: 'Tree' },
            this.props.children
        );
    }
});

var TreeNode = React.createClass({
    displayName: 'TreeNode',

    propTypes: {
        children: React.PropTypes.node
    },

    render: function render() {
        return React.createElement(
            'div',
            { className: 'TreeNode' },
            this.props.children
        );
    }
});

/**
 * Inner content of a tree node
 */
var TreeLeaf = React.createClass({
    displayName: 'TreeLeaf',

    propTypes: {
        children: React.PropTypes.node,
        href: React.PropTypes.string,
        onClick: React.PropTypes.func,
        status: React.PropTypes.oneOf(STATUS)
    },
    contextTypes: {
        depth: React.PropTypes.number
    },

    getDefaultProps: function getDefaultProps() {
        return {
            href: '#'
        };
    },
    onClick: function onClick(event) {
        var onClick = this.props.onClick;

        if (!onClick) {
            return;
        }

        event.preventDefault();
        onClick();
    },
    render: function render() {
        var _props = this.props,
            href = _props.href,
            status = _props.status;
        var depth = this.context.depth;


        var style = {
            paddingLeft: PADDING_INITIAL + depth * DEPTH_PADDING
        };

        var className = classNames('TreeLeaf', status ? 'status-' + status : '');

        return React.createElement(
            'a',
            { className: className, href: href, style: style },
            this.props.children
        );
    }
});

/**
 * Little triangle to toggle sub-tree.
 * Insert a TreeToggle in a TreeLeaf
 */
var TreeToggle = React.createClass({
    displayName: 'TreeToggle',

    propTypes: {
        active: React.PropTypes.bool,
        onClick: React.PropTypes.func
    },

    onClick: function onClick(event) {
        var onClick = this.props.onClick;


        event.preventDefault();
        event.stopPropagation();

        if (onClick) onClick();
    },
    render: function render() {
        var active = this.props.active;

        var className = classNames('TreeToggle', {
            active: active
        });

        return React.createElement(
            'span',
            { className: className },
            React.createElement(Icon, { id: active ? 'triangle-down' : 'triangle-right' })
        );
    }
});

module.exports = Tree;
module.exports.Node = TreeNode;
module.exports.Leaf = TreeLeaf;
module.exports.Toggle = TreeToggle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,